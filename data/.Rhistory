library(caret)
species.features=read.table("species.csv", header=TRUE, sep=",")
head(species.features)
summary(species.features)
head(species.features[,2:3])
species.full = species.features
species.features = species.full[,2:3]
head(species.features)
append(species.features, species.full[,5:6])
species.features =append(species.features, species.full[,5:6])
head(species.features)
help(append)
species.features = species.full[,2:3]
head(species.features)
help(merge)
species.features = merge(species.features,species.full[,5:6])
species.features = species.full[,2:3]
head(species.full)
species.features$age = species.full$age
species.features$weight = species.full$weight
head(species.features)
species.targets = species.full$species
nbmodel = train(species.features,species.targets,"nb")
head(species.full)
species.features=species.full[,c(5,6)]
head(species.features)
nbmodel = train(species.features,species.targets,"nb")
nbmodel
na.omit(features.full)
na.omit(species.full)
species.full = na.omit(species.full)
species.features=species.full[,c(5,6)]
species.targets = species.full$species
nbmodel = train(species.features,species.targets,"nb")
summary(species.targets)
nbmodel = train(species.features,species.targets,"nb")
nbmodel
nbmodel = train(species.features,species.targets,"rf")
nbmodel = train(species.features,species.targets,"svm")
nbmodel = train(species.features,species.targets,"svmLinear")
nbmodel = train(species.features,species.targets,"nnet")
nbmodel = knn3(species.features,species.targets)
nbmodel = knn3(as.matrix(species.features),species.targets)
nbmodel
print(nbmodel)
nbmodel = train(species.features,species.targets,"knn")
nbmodel
knnmodel = train(species.features,species.targets,"knn")
knnmodel
knnmodel = train(as.matrix(species.features),species.targets,"knn")
summary(species.features)
species.features[species.features$age > 10000]
species.features[,species.features$age > 10000]
species.features[species.features$age > 10000,]
species.features[species.features$age < 0,]
species.features = species.features[species.features$age > 0,]
summary(species.features)
species.features = species.features[species.features$age < 20000,]
summary(species.features)
species.features = species.features[species.features$weight < 2000,]
summary(species.features)
knnmodel = train(as.matrix(species.features),species.targets,"knn")
species.full = species.full[species.features$age > 0,]
species.full = species.full[species.features$age < 20000,]
species.full = species.full[species.features$weight < 2000,]
head(species.full)
species.features = species.full[,5:6]
species.targets = species.full[4]
knnmodel = train(as.matrix(species.features),species.targets,"knn")
species.targets = species.full[,4]
knnmodel = train(as.matrix(species.features),species.targets,"knn")
levels(species.targets)
summary(species.full$species)
species.full = species.full[(species.features$species=="Canine" || species.features$species=="Feline"),]
summary(species.full$species)
head(species.full)
species.full = read.table("species.csv",header=T,sep=",")
head(species.full)
species.full = species.full[species.features$species=="Canine" | species.features$species=="Feline",]
head(species.full)
species.full = read.table("species.csv",header=T,sep=",")

head(species.full[,species.full$age < 0])
head(species.full[species.full$age < 0],)
head(species.full[species.full$age < 0,])
head(na.omit(species.full[species.full$age < 0,])))
head(na.omit(species.full[species.full$age < 0,]))
head(na.omit(species.full[species.full$species=="Canine" || species.full$species=="Feline" < 0,]))
head(na.omit(species.full[species.full$species=="Canine" || species.full$species=="Feline",]))
head(na.omit(species.full[species.full$species=="Canine" | species.full$species=="Feline",]))
species.full = na.omit(species.full[species.full$species=="Canine" | species.full$species=="Feline",])
summary(species.full)
species.full = species.full[species.features$age>0 && species.features$age < 20000,]
summary(species.full)
species.full = species.full[species.full$age>0 && species.full$age < 20000,]
summary(species.full)
species.full = species.full[species.full$age>0,]
species.full$weight = species.full$weight*2.2
species.full = species.full[species.full$age < 20000,]
help(subset)
subset(species.full, units=="kilograms")
subset(species.full, units=="kilograms")$weight
species.full$units == "kilograms"
kilos = species.full$units == "kilograms"
species.full[species.full$units=="kilograms"]$weight
species.full[species.full$units=="kilograms",]$weight
species.full[species.full$units=="kilograms",]
species.full = species.full[species.full$units =="pounds",]
head(species.full)
summary(species.full)
species.full = species.full[species.full$weight < 1000,]
summary(species.full)
head(subset(species.full,select=c("age","weight")))
species.features = subset(species.full,select=c("age","weight"))
species.targets = subset(species.full, select="species")
nbmodel = train(species.features,species.targets,"nb")
nbmodel = train(species.features,species.targets,"knn")
nbmodel = train(as.matrix(species.features),as.vector(species.targets),"knn")
summary(species.targets)
as.vector(species.targets)
as.vector(as.string(species.targets))
as.vector(as.character(species.targets))
nbmodel = train(as.matrix(species.features),as.vector(species.targets),"knn")
species.targets[drop=TRUE]
species.targets$species[drop=TRUE]
species.targets = species.targets$species[drop=TRUE]
nbmodel = train(species.features,species.targets,"knn")
help(split)
set.seed(3456)
set1index = createDataPartition(species.full, p=.8, list=FALSE, times=1)
set1index = createDataPartition(as.matrix(species.full), p=.8, list=FALSE, times=1)
set1index = createDataPartition(species.full$species, p=.8, list=FALSE, times=1)
head(set1index)
species.full[set1index]
head(species.full[set1index])
head(species.full)
species.full[set1index]$species
species.full$species[set1index]
summary(species.full)
help(createDataPartition)
set1index = createDataPartition(species.full$species, p=.8, list=FALSE, times=1)
set1index
head(set1index)
set1index = createDataPartition(species.full$species, p=.2, list=FALSE, times=1)
head(set1index)
length(set1index)
set1index = createDataPartition(species.full$species, p=.2, list=TRUE, times=1)
length(set1index)
set1index
species.full[set1index]
set1index = createDataPartition(species.full$species, p=.2, list=FALSE, times=1)
species.full[set1index]
summary(species.full$species[set1index])
set1index = createDataPartition(species.targets, p=.2, list=FALSE, times=1)
summary(species.full$species[set1index])
summary(species.targets)
summary(species.targets[set1index])
summary(species.features[set1index])
species.features[set1index]
head(species.features[set1index])
species.features$age[set1index]
species.features$weight[set1index]
head(species.features[set1index,])
help(createDataPartition)
head(species.features[-set1index,])
species.targets.test = species.targets[set1index]
species.targets.train = species.targets[-set1index]
species.features.test = species.features[set1index,]
species.features.train = species.features[-set1index,]
length(species.targets.train)
length(species.targets.test)
knnmodel = train(species.features.train,species.targets.train, "knn")
knnmodel
knnmodel.fit
confusionMatrix(knnmodel)
speciesPredictions = extractPrediction(list(knnmodel),testX=species.features.test,testY=species.targets.test)
speciesPredictions = speciesPredictions$dataType == "Test",]
speciesPredictions = speciesPredictions[speciesPredictions$dataType == "Test",]
speciesPredictions
confusionMatrix(speciesPredictions$pred, speciesPredictions$obs)
nbmodel = train(species.features.train, species.targets.train, "nb")
speciesPredictions = extractPrediction(list(nbmodel),testX=species.features.test,testY=species.targets.test)
speciesPredictions = speciesPredictions[speciesPredictions$dataType == "Test",]
confusionMatrix(speciesPredictions$pred, speciesPredictions$obs)
q()
